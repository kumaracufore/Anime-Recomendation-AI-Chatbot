{
  "version": 3,
  "sources": ["../../@huggingface/inference/dist/index.mjs"],
  "sourcesContent": ["// src/HfInference.ts\nvar HfInference = class {\n  apiKey;\n  defaultOptions;\n  constructor(apiKey = \"\", defaultOptions = {}) {\n    this.apiKey = apiKey;\n    this.defaultOptions = defaultOptions;\n  }\n  /**\n   * Tries to fill in a hole with a missing word (token to be precise). That’s the base task for BERT models.\n   */\n  async fillMask(args, options) {\n    return this.request(args, options);\n  }\n  /**\n   * This task is well known to summarize longer text into shorter text. Be careful, some models have a maximum length of input. That means that the summary cannot handle full books for instance. Be careful when choosing your model.\n   */\n  async summarization(args, options) {\n    return (await this.request(args, options))?.[0];\n  }\n  /**\n   * Want to have a nice know-it-all bot that can answer any question?. Recommended model: deepset/roberta-base-squad2\n   */\n  async questionAnswer(args, options) {\n    return await this.request(args, options);\n  }\n  /**\n   * Don’t know SQL? Don’t want to dive into a large spreadsheet? Ask questions in plain english! Recommended model: google/tapas-base-finetuned-wtq.\n   */\n  async tableQuestionAnswer(args, options) {\n    return await this.request(args, options);\n  }\n  /**\n   * Usually used for sentiment-analysis this will output the likelihood of classes of an input. Recommended model: distilbert-base-uncased-finetuned-sst-2-english\n   */\n  async textClassification(args, options) {\n    return (await this.request(args, options))?.[0];\n  }\n  /**\n   * Use to continue text from a prompt. This is a very generic task. Recommended model: gpt2 (it’s a simple model, but fun to play with).\n   */\n  async textGeneration(args, options) {\n    return (await this.request(args, options))?.[0];\n  }\n  /**\n   * Usually used for sentence parsing, either grammatical, or Named Entity Recognition (NER) to understand keywords contained within text. Recommended model: dbmdz/bert-large-cased-finetuned-conll03-english\n   */\n  async tokenClassification(args, options) {\n    return HfInference.toArray(await this.request(args, options));\n  }\n  /**\n   * This task is well known to translate text from one language to another. Recommended model: Helsinki-NLP/opus-mt-ru-en.\n   */\n  async translation(args, options) {\n    return (await this.request(args, options))?.[0];\n  }\n  /**\n   * This task is super useful to try out classification with zero code, you simply pass a sentence/paragraph and the possible labels for that sentence, and you get a result. Recommended model: facebook/bart-large-mnli.\n   */\n  async zeroShotClassification(args, options) {\n    return HfInference.toArray(await this.request(args, options));\n  }\n  /**\n   * This task corresponds to any chatbot like structure. Models tend to have shorter max_length, so please check with caution when using a given model if you need long range dependency or not. Recommended model: microsoft/DialoGPT-large.\n   *\n   */\n  async conversational(args, options) {\n    return await this.request(args, options);\n  }\n  /**\n   * This task reads some text and outputs raw float values, that are usually consumed as part of a semantic database/semantic search.\n   */\n  async featureExtraction(args, options) {\n    return await this.request(args, options);\n  }\n  /**\n   * This task reads some audio input and outputs the said words within the audio files.\n   * Recommended model (english language): facebook/wav2vec2-large-960h-lv60-self\n   */\n  async automaticSpeechRecognition(args, options) {\n    return await this.request(args, {\n      ...options,\n      binary: true\n    });\n  }\n  /**\n   * This task reads some audio input and outputs the likelihood of classes.\n   * Recommended model:  superb/hubert-large-superb-er\n   */\n  async audioClassification(args, options) {\n    return await this.request(args, {\n      ...options,\n      binary: true\n    });\n  }\n  /**\n   * This task reads some image input and outputs the likelihood of classes.\n   * Recommended model: google/vit-base-patch16-224\n   */\n  async imageClassification(args, options) {\n    return await this.request(args, {\n      ...options,\n      binary: true\n    });\n  }\n  /**\n   * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.\n   * Recommended model: facebook/detr-resnet-50\n   */\n  async objectDetection(args, options) {\n    return await this.request(args, {\n      ...options,\n      binary: true\n    });\n  }\n  /**\n   * This task reads some image input and outputs the likelihood of classes & bounding boxes of detected objects.\n   * Recommended model: facebook/detr-resnet-50-panoptic\n   */\n  async imageSegmentation(args, options) {\n    return await this.request(args, {\n      ...options,\n      binary: true\n    });\n  }\n  /**\n   * This task reads some text input and outputs an image.\n   * Recommended model: stabilityai/stable-diffusion-2\n   */\n  async textToImage(args, options) {\n    return await this.request(args, {\n      ...options,\n      blob: true\n    });\n  }\n  async request(args, options) {\n    const mergedOptions = { ...this.defaultOptions, ...options };\n    const { model, ...otherArgs } = args;\n    const headers = {};\n    if (this.apiKey) {\n      headers[\"Authorization\"] = `Bearer ${this.apiKey}`;\n    }\n    if (!options?.binary) {\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n    if (options?.binary && mergedOptions.wait_for_model) {\n      headers[\"X-Wait-For-Model\"] = \"true\";\n    }\n    const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {\n      headers,\n      method: \"POST\",\n      body: options?.binary ? args.data : JSON.stringify({\n        ...otherArgs,\n        options: mergedOptions\n      })\n    });\n    if (mergedOptions.retry_on_error !== false && response.status === 503 && !mergedOptions.wait_for_model) {\n      return this.request(args, {\n        ...mergedOptions,\n        wait_for_model: true\n      });\n    }\n    let output;\n    if (options?.blob) {\n      if (!response.ok) {\n        throw new Error(\"An error occurred while fetching the blob\");\n      }\n      return await response.arrayBuffer();\n    } else {\n      output = await response.json();\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    return output;\n  }\n  static toArray(obj) {\n    if (Array.isArray(obj)) {\n      return obj;\n    }\n    return [obj];\n  }\n};\nexport {\n  HfInference\n};\n"],
  "mappings": "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",
  "names": []
}
